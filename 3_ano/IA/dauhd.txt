breed [fish a-fish]

;; fish parts include fins, tails, and spots - all of
;; which are tied and attached to the main fish body
breed [fish-parts a-fish-part]

;; fish are tied to somatic-cells.  Fish are what
;; wander about (the body of the organism),
;; while the somatic cell contains all the
;; genetic information of the organism
breed [somatic-cells somatic-cell]

;; sex cells that are hatched from somatic cells
;; through a simplified form of meiosis
breed [gamete-cells gamete-cell]

;; alleles are tied to somatic cells or gamete
;; cells - 1 allele is assigned to one chromosome
breed [alleles allele]

breed [fish-bones a-fish-bones]     ;; used for visualization of fish death
breed [fish-zygotes a-fish-zygote]  ;; used for visualization of a fish mating event

;; used for visualization of different types of mouse actions the user can do in the
;; fish tank - namely removing fish and adding/subtracting dividers
breed [mouse-cursors mouse-cursor]

fish-own          [sex bearing]
somatic-cells-own [sex]
gamete-cells-own  [sex]
fish-bones-own    [countdown]
alleles-own       [gene value owned-by-fish? side]

patches-own [type-of-patch divider-here?]

globals [

  ;; for keeping track of the # of alleles of each type
  #-big-B-alleles  #-small-b-alleles
  #-big-T-alleles  #-small-t-alleles
  #-big-F-alleles  #-small-f-alleles
  #-big-G-alleles  #-small-g-alleles
  #-y-chromosomes  #-x-chromosomes

  ;; globals for keeping track of default values for
  ;; shapes and colors used for phenotypes
  water-color
  green-dorsal-fin-color  no-green-dorsal-fin-color
  yellow-tail-fin-color   no-yellow-tail-fin-color
  male-color              female-color
  spots-shape             no-spots-shape
  forked-tail-shape       no-forked-tail-shape

  ;;  globals for keeping track of phenotypes
  #-of-green-dorsal-fins  #-of-no-green-dorsal-fins
  #-of-yellow-tail-fins   #-of-no-yellow-tail-fins
  #-of-spots              #-of-no-spots
  #-of-forked-tails       #-of-no-forked-tails
  #-of-males              #-of-females

  ;; keeps track of whether the mouse button was down on last tick
  mouse-continuous-down?

  num-fish-removed
  num-fish-born
  num-fish-in-tank
  fish-forward-step      ;; size of movement steps each tick
  gamete-forward-step    ;; size of movement steps each tick

  ;; used for spacing the chromosomes out in the
  ;; karyotypes of the somatic cells and gametes
  intra-chromosome-pair-spacing
  inter-chromosome-pair-spacing

  size-of-karyotype-background-for-cells

  initial-#-females
  initial-#-males
]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;; setup procedures ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to setup
  clear-all
  set mouse-continuous-down? false
  set intra-chromosome-pair-spacing 0.20
  set inter-chromosome-pair-spacing 0.55
  set fish-forward-step 0.04
  set num-fish-removed 0
  set num-fish-born 0
  set num-fish-in-tank 0

  ;; the size of the large pink rectangle used as the
  ;; background for the cell or karyotype of the cell
  set size-of-karyotype-background-for-cells 5.2

  set initial-#-females (floor ((initial-females / 100) * carrying-capacity))
  set initial-#-males carrying-capacity - initial-#-females

  set green-dorsal-fin-color    [90 255 90 255]
  set no-green-dorsal-fin-color [176 196 222 255]
  set yellow-tail-fin-color     [255 255 0 255]
  set no-yellow-tail-fin-color  [176 196 255 255]
  set female-color              [255 150 150 255]
  set male-color                [150 150 255 255]
  set water-color               blue - 1.5

  set spots-shape                 "fish-spots"
  set no-spots-shape              "none"
  set forked-tail-shape           "fish-forked-tail"
  set no-forked-tail-shape        "fish-no-forked-tail"
  set-default-shape fish          "fish-body"
  set-default-shape somatic-cells "cell-somatic"
  set-default-shape fish-bones    "fish-bones"

  create-mouse-cursors 1 [
    set shape "x"
    set hidden? true
    set color red
    set heading 0
  ]

  set-tank-regions
  create-initial-gene-pool
  create-initial-fish
  visualize-tank
  visualize-fish-and-alleles
  reset-ticks
end


to set-tank-regions
  let min-pycor-edge min-pycor  let max-pycor-edge max-pycor
  let water-patches nobody
  ask patches [
    set divider-here? false
    set type-of-patch "water"
    ;; water edge are the patches right up against the tank wall on the inside of the
    ;; tank - they are used to determine whether to turn the fish around as they are
    ;; moving about the tank
    if pycor =  (max-pycor-edge - 2) or
      pycor = (min-pycor-edge + 2) or
      pxcor = left-side-of-water-in-tank or
      pxcor = right-side-of-water-in-tank [
      set type-of-patch "water-edge"
    ]
    if pycor >= (max-pycor-edge - 1) [
      set type-of-patch "air"
    ]
    if pxcor <= (left-side-of-water-in-tank - 1) or
      pxcor >= (right-side-of-water-in-tank + 1) or
      pycor <= (min-pycor-edge + 1) [
      set type-of-patch "tank-wall"
    ]
    if pycor = (max-pycor-edge) or
      pycor = (min-pycor-edge) or
      pxcor = (left-side-of-water-in-tank - 2) or
      pxcor >= (right-side-of-water-in-tank + 2) [
      set type-of-patch "air"
    ]
  ]
  set water-patches  patches with [type-of-patch = "water"]
end


to create-initial-gene-pool
  let num-big-alleles 0
  let initial-number-fish (carrying-capacity)

  set num-big-alleles  round ((initial-alleles-big-b * 2 *  initial-number-fish) / 100)
  make-initial-alleles-for-gene 1 "B" "b" num-big-alleles
  set num-big-alleles  round ((initial-alleles-big-t * 2 *  initial-number-fish) / 100)
  make-initial-alleles-for-gene 2 "T" "t" num-big-alleles
  set num-big-alleles  round ((initial-alleles-big-f * 2 *  initial-number-fish) / 100)
  make-initial-alleles-for-gene 3 "F" "f" num-big-alleles
  set num-big-alleles  round ((initial-alleles-big-g * 2 *  initial-number-fish) / 100)
  make-initial-alleles-for-gene 4 "G" "g" num-big-alleles

  make-initial-alleles-for-gene 5 "Y" "X" initial-#-males
end


to create-initial-fish
  ;; makes the cells for the initial fish
  create-somatic-cells initial-#-males [set sex "male"]
  create-somatic-cells initial-#-females [set sex "female"]
  ask somatic-cells [setup-new-somatic-cell-attributes]
  ;; randomly sorts out the gene pool to each somatic cell
  distribute-gene-pool-to-somatic-cells
  ;; grows the body parts from the resulting genotype, and distributes the fish
  ask somatic-cells [grow-fish-parts-from-somatic-cell]
  distribute-fish-in-tank
end


to setup-new-somatic-cell-attributes
  ;; somatic cells are the same as body cells - they are the rectangle shape that is
  ;; tied to the fish and chromosomes that looks like a karyotype
  set heading 0
  set breed somatic-cells
  set color [100 100 100 100]
  set size size-of-karyotype-background-for-cells
  set hidden? true
end


to distribute-fish-in-tank
   let water-patches patches with [type-of-patch = "water"]
   let water-patch nobody
   ask fish [
     move-to one-of water-patches
   ]
end


to make-initial-alleles-for-gene [gene-number allele-1 allele-2 num-big-alleles ]
  let initial-number-fish initial-#-males + initial-#-females
  create-alleles 2 * (initial-number-fish) [
    set gene gene-number
    set shape (word "gene-" gene-number)
    set heading 0
    set owned-by-fish? false
    set value allele-2
    set color  [0 0 0 255]
    set label-color color
    set label (word value "     " )
  ]
  ;; after coloring all the alleles with black band on chromosomes with the
  ;; dominant allele label, now go back and select the correct proportion of
  ;; these to recolor code as recessive alleles with white bands on chromosomes
  ;; and add recessive letter label
  ask n-of num-big-alleles  alleles with [gene = gene-number] [
    set value allele-1
    set color [220 220 220 255]
    set label (word value "     " )
    set label-color color
    ]
end



to distribute-gene-pool-to-somatic-cells
  ;; randomly selects some chromosomes for this cell
  let this-somatic-cell nobody
  let last-sex-allele ""

  ask somatic-cells [
    set this-somatic-cell self
    foreach [ 1 2 3 4 ] [ n ->
      ;; assign one of the alleles to appear on the left side of the chromosome pair
      position-and-link-alleles self n "left"
      ;; assign the other allele to appear on the right side
      position-and-link-alleles self n "right"
    ]

    ;; now assign the sex chromosome pair, putting one of the Xs on the left,
    ;; and the other chromosome (whether it is an X or } on the right
    ask one-of alleles with [not owned-by-fish? and gene = 5 and value = "X"] [
       set owned-by-fish? true
       set size 1.2
       set xcor ((inter-chromosome-pair-spacing * 4) + .1)
       set ycor -0.4
       set side "left"
       create-link-from this-somatic-cell  [
         set hidden? true
         set tie-mode "fixed"
         tie
       ]
    ]
    ifelse sex = "male" [ set last-sex-allele "Y" ] [ set last-sex-allele "X" ]
    ask one-of alleles with [
      not owned-by-fish? and gene = 5 and value = last-sex-allele
    ] [
      set owned-by-fish? true
      set size 1.2
      set xcor ((inter-chromosome-pair-spacing * 4) + intra-chromosome-pair-spacing + .1)
      set ycor -0.4
      set side "right"
      create-link-from this-somatic-cell [
        set hidden? true
        set tie-mode "fixed"
        tie
      ]
    ]
  ]
end


to position-and-link-alleles [this-somatic-cell gene-number which-side]
  let pair-shift-right 0
  let side-shift 0

  ;; adjusts the spacing between chromosome pairs (1-4( so that one of each pair
  ;; is moved to the left and one of each pair is moved to the right
  ifelse which-side = "right"
    [ set side-shift intra-chromosome-pair-spacing ]
    [ set side-shift 0 ]
  set pair-shift-right ((inter-chromosome-pair-spacing * gene-number) - .45)

  ask one-of alleles with [not owned-by-fish? and gene = gene-number] [
    set owned-by-fish? true
    set side which-side
    set size 1.2
    set xcor ([xcor] of this-somatic-cell + (pair-shift-right + side-shift))
    set ycor ([ycor] of this-somatic-cell - 0.4)
    create-link-from this-somatic-cell [
      set hidden? true
      set tie-mode "fixed"
      tie
    ]
  ]
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;; runtime-procedures ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to go
   wander
   update-statistics
   detect-fish-outside-the-water
   detect-and-move-fish-at-inside-tank-boundary
   auto-selection
   clean-up-fish-bones
   if auto-replace? [find-potential-mates]
   move-gametes-together
   convert-zygote-into-somatic-cell
   detect-mouse-selection-event
   visualize-fish-and-alleles

   visualize-tank
   tick
end


to auto-selection
  if auto-replace? [
    ;; use EVERY to limit the rate of selection
    ;; to slow things down for visualization purposes
    every 0.25 [
      ;;let under-carrying-capacity carrying-capacity -  num-fish-in-tank
      if any? fish [
        ask one-of fish [
          if both-sexes-in-this-fishs-tank-region? [
            remove-this-fish
          ]
        ]
      ]
    ]
  ]
end



to move-gametes-together
  ;; moves the male sex cell (gamete) toward its target
  ;; female sex cell it will fertilize (zygote).
  let my-zygote nobody
  let distance-to-zygote 0
  ;; if the user as the see-sex-cells? switch on then slow down their motion
  ifelse see-sex-cells? [ set gamete-forward-step 0.08] [ set gamete-forward-step 1.0]

   ask gamete-cells [
     set my-zygote one-of fish-zygotes with [in-link-neighbor? myself]
     set distance-to-zygote distance my-zygote
     if distance-to-zygote > 0
      [ face my-zygote
        ifelse distance-to-zygote > gamete-forward-step [fd gamete-forward-step ] [fd distance-to-zygote]
        set heading 0
      ]
   ]
end


to convert-zygote-into-somatic-cell
  ;; upon arriving at the female sex cell the male sex cell will fertilize
  ;; it and disappear the zygote (shown as a heart) will convert into a
  ;; somatic cell and a fish will immediately appear (skipping the time
  ;; it takes for the embryo to form)
  let female-sex-cell-alleles nobody
  let male-sex-cell-alleles nobody
  let male-gamete nobody
  let female-gamete nobody
  let this-somatic-cell nobody

  ask fish-zygotes [
   set male-gamete gamete-cells with [out-link-neighbor? myself and sex = "male"]
   set female-gamete gamete-cells with [out-link-neighbor? myself and sex = "female"]
   if any? male-gamete and any? female-gamete [
     if distance one-of male-gamete <= .01 and distance one-of female-gamete <= .01  [
       ;; close enough for fertilization to be complete
       setup-new-somatic-cell-attributes
       set this-somatic-cell self
       ask male-gamete [
         set male-sex-cell-alleles alleles-that-belong-to-this-gamete
         die
       ]
       ask female-gamete [
         set female-sex-cell-alleles alleles-that-belong-to-this-gamete
         die
       ]
       ask male-sex-cell-alleles [
         create-link-from this-somatic-cell [
           set hidden? true
           set tie-mode "fixed"
           tie
         ]
       ]
       ask female-sex-cell-alleles [
         create-link-from this-somatic-cell [
           set hidden? true
           set tie-mode "fixed"
           tie
         ]
       ]
       align-alleles-for-this-somatic-cell this-somatic-cell
       set sex sex-phenotype
       grow-fish-parts-from-somatic-cell
       set num-fish-born num-fish-born + 1
     ]
   ]
 ]
end


to align-alleles-for-this-somatic-cell [this-zygote]
  ;; when gametes merge they may both have chromosomes on the right
  ;; (for each matching pair) or both on the left
  ;; this procedure moves one of them over if that is the case
  let all-alleles alleles with [in-link-neighbor? this-zygote]
  foreach [1 2 3 4 5] [ this-gene ->
    if count all-alleles with [gene = this-gene and side = "left"]  > 1 [
      ask one-of all-alleles with [gene = this-gene] [
        set heading 90
        forward intra-chromosome-pair-spacing
        set side "right"
      ]
    ]
    if count all-alleles with [gene = this-gene and side = "right"] > 1 [
      ask one-of all-alleles with [gene = this-gene] [
        set heading 90
        back
        intra-chromosome-pair-spacing
        set side "left"
      ]
    ]
  ]
end


to find-potential-mates
  let mom nobody
  let dad nobody
  let xcor-dad 0
  let turtles-in-this-region nobody
  let potential-mates nobody
  let all-fish-and-fish-zygotes nobody

  if any? somatic-cells with [sex = "male"] [
    ask one-of somatic-cells with [ sex = "male" ] [
      set dad self
      set xcor-dad xcor
    ]
    ask dad [
      ;; if  parent genetic information for sexual reproduction
      ;; still exists in the gene pool in this region
      set turtles-in-this-region other-turtles-in-this-turtles-tank-region
    ]
    set all-fish-and-fish-zygotes turtles-in-this-region with [
      breed = fish or breed = fish-zygotes
    ]
    set potential-mates turtles-in-this-region with [
      breed = somatic-cells and sex = "female"
    ]
    if any? potential-mates [
       ask one-of potential-mates  [ set mom self ]
       ;;; only reproduce up to the carrying capacity in this region allowed
       let this-carrying-capacity  carrying-capacity-in-this-region xcor-dad
       if count all-fish-and-fish-zygotes < this-carrying-capacity [
         reproduce-offspring-from-these-two-parents mom dad
       ]
    ]
  ]
end


to reproduce-offspring-from-these-two-parents [mom dad]
  let child nobody
    ask mom [
      hatch 1 [
       set heading 0
       set breed fish-zygotes
       set size 1
       set shape "heart"
       set color red
       set child self
      ]

    ]
    ask mom [ link-alleles-to-gametes-and-gametes-to-zygote child ]
    ask dad [ link-alleles-to-gametes-and-gametes-to-zygote child ]
end


to link-alleles-to-gametes-and-gametes-to-zygote [child]
  let this-new-gamete-cell nobody
  hatch 1 [
    set breed gamete-cells
    set heading 0
    create-link-to child [set hidden? false] ;; link these gametes to the child
    ifelse sex = "male"
      [set shape "cell-gamete-male"]
      [set shape "cell-gamete-female"]

       set this-new-gamete-cell self
    ]

  foreach [1 2 3 4 5] [ this-gene ->
    ask n-of 1 alleles with [in-link-neighbor? myself and  gene = this-gene]
    [hatch 1 [set owned-by-fish? false
       create-link-from this-new-gamete-cell  [set hidden? true  set tie-mode "fixed" tie]
      ]
    ]
  ]

end


to wander
  ask fish [
    set heading bearing
    rt random-float 70 lt random-float 70
    set bearing heading
    fd fish-forward-step
    set heading 0
    ]
  ask somatic-cells [set heading 0]
end



to detect-fish-outside-the-water
     ask fish with [type-of-patch != "water" and type-of-patch != "water-edge"] [  remove-this-fish  ]
end


to detect-and-move-fish-at-inside-tank-boundary
   let nearest-water-patch nobody
   let water-patches patches with [type-of-patch = "water" and not divider-here?]
   ask fish [
    set nearest-water-patch  min-one-of water-patches [distance myself]
    if type-of-patch = "tank-wall" or type-of-patch = "water-edge"   [
      set heading towards nearest-water-patch
      fd fish-forward-step * 2
      set heading 0
      set bearing  random-float 360
    ]
    if divider-here? [move-to nearest-water-patch]
   ]
end


to clean-up-fish-bones
  let bone-transparency 0
  let color-list []
   ask fish-bones [  ;;; fade away progressively the fish bone shape until the countdown in complete
     set countdown countdown - 1
     set bone-transparency (countdown * 255 / 50)
     set color-list lput bone-transparency [255 255 255]
     set color color-list
     if countdown <= 0 [die]
   ]
end


to remove-this-fish
 set num-fish-removed num-fish-removed + 1
 hatch 1 [
   ;; make the fish bones for visualization of this fishes death
   set breed fish-bones
   set color white
   set countdown 25
 ]
 ask out-link-neighbors [
   ;; ask the somatic cells and the fish-parts and the alleles attached to this fish to die first
   ask out-link-neighbors [ die ]
   die
 ]
 die
end


to detect-mouse-selection-event

  let p-mouse-xcor mouse-xcor
  let p-mouse-ycor mouse-ycor
  let p-type-of-patch [type-of-patch] of patch p-mouse-xcor p-mouse-ycor
  let mouse-was-just-down? mouse-down?

  ask mouse-cursors [
    setxy p-mouse-xcor p-mouse-ycor
    ;;;;;;  cursor visualization ;;;;;;;;;;;;
    if (p-type-of-patch = "water") [
      set hidden? false
      set shape "x"
      set label-color white
      set label "remove fish"
    ]
    if divider-here? and p-type-of-patch = "tank-wall" [
      set hidden? false
      set shape "subtract divider"
      set label-color white
      set label "remove divider"
    ]
    if not divider-here? and p-type-of-patch = "tank-wall" [
      set hidden? false
      set shape "add divider"
      set label-color white
      set label "add divider"
    ]
    if (p-type-of-patch != "water" and p-type-of-patch != "tank-wall") [
      set hidden? true
      set shape "x"
      set label ""
    ]
    ;;;;; cursor actions ;;;;;;;;;;;;;;;
    if mouse-was-just-down? [
      ask fish-here [remove-this-fish]
    ]
    if (mouse-was-just-down? and
      not mouse-continuous-down? and
      p-type-of-patch = "tank-wall" and
      pycor = (min-pycor + 1) and
      pxcor > (min-pxcor + 1) and
      pxcor < (max-pxcor - 1)) [
      set divider-here? not divider-here?
      let divider-xcor pxcor
      ask patches with [
        (type-of-patch = "water" or type-of-patch = "water-edge") and
        pxcor = divider-xcor
      ] [
        set divider-here? not divider-here?
      ]
    ]
    ifelse not mouse-inside? [set hidden? true][set hidden? false]
  ]

  ifelse mouse-was-just-down?
    [ set mouse-continuous-down? true ]
    [ set mouse-continuous-down? false ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;; calculate statistics procedures ;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to update-statistics
  set num-fish-in-tank (count fish )

  set #-big-B-alleles   count alleles with [value = "B"]
  set #-small-b-alleles count alleles with [value = "b"]
  set #-big-T-alleles   count alleles with [value = "T"]
  set #-small-t-alleles count alleles with [value = "t"]
  set #-big-F-alleles   count alleles with [value = "F"]
  set #-small-f-alleles count alleles with [value = "f"]
  set #-big-G-alleles   count alleles with [value = "G"]
  set #-small-g-alleles count alleles with [value = "g"]
  set #-y-chromosomes   count alleles with [value = "Y"]
  set #-x-chromosomes   count alleles with [value = "X"]

  set #-of-green-dorsal-fins     count fish-parts with [color = green-dorsal-fin-color]
  set #-of-no-green-dorsal-fins  count fish-parts with [color = no-green-dorsal-fin-color]
  set #-of-yellow-tail-fins      count fish-parts with [color = yellow-tail-fin-color]
  set #-of-no-yellow-tail-fins   count fish-parts with [color = no-yellow-tail-fin-color]
  set #-of-spots               count fish-parts with [shape = spots-shape and hidden? = false]
  set #-of-no-spots            count fish-parts with [shape = spots-shape and hidden? = true]
  set #-of-forked-tails        count fish-parts with [shape = forked-tail-shape]
  set #-of-no-forked-tails     count fish-parts with [shape = no-forked-tail-shape]
  set #-of-males               count fish with [sex = "male"]
  set #-of-females             count fish with [sex = "female"]

end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;; visualization-procedures ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to visualize-tank
   ask patches with [(type-of-patch = "water" or type-of-patch = "water-edge")] [
     ifelse not divider-here?
       [ set pcolor water-color ]
       [ set pcolor gray - 3.5 ]
   ]
   ask patches with [type-of-patch = "tank-wall" ] [
     ifelse not divider-here?
       [ set pcolor gray - 3 ]
       [ set pcolor gray - 4 ]
     ]
   ask patches with [type-of-patch = "air" ] [
     set pcolor gray + 3
   ]
end


to visualize-fish-and-alleles
  ifelse see-body-cells? [
    ask somatic-cells [
      set hidden? false
      ask alleles with [ in-link-neighbor? myself ] [
        set hidden? false
      ]
    ]
  ] [
    ask somatic-cells [
      set hidden? true
      ask alleles with [ in-link-neighbor? myself ] [
        set hidden? true
      ]
    ]
  ]
  ifelse see-sex-cells? [
    ask gamete-cells [
      set hidden? false
      ask alleles with [ in-link-neighbor? myself ] [
        set hidden? false
      ]
    ]
    ask fish-zygotes [
      set hidden? false
    ]
  ] [
    ask gamete-cells [
      set hidden? true
      ask alleles with [ in-link-neighbor? myself ] [
        set hidden? true
      ]
    ]
    ask fish-zygotes [
      set hidden? true
    ]
  ]
  ifelse see-fish? [
    ask fish [
      set hidden? false
    ]
    ask fish-parts [
      set hidden? false
    ]
  ] [
    ask fish [
      set hidden? true
    ]
    ask fish-parts [
      set hidden? true
    ]
  ]
end


to grow-fish-parts-from-somatic-cell
  let this-fish-body nobody

  hatch 1 [
    set breed fish
    set bearing  random-float 360
    set heading 0
    set size 1
    set this-fish-body self
    if sex = "male" [set color male-color]
    if sex = "female" [set color female-color]
  ]
  create-link-from  this-fish-body  [
    ;; somatic cell will link to the fish body -
    ;; thus following the fish body around as it moves
    set hidden? true
    set tie-mode "fixed"
    tie
  ]

  hatch 1 [
    set breed fish-parts  ;;;make tail
    set breed fish-parts
    set size 1
    set shape tail-shape-phenotype
    set color tail-color-phenotype
    set heading -90 fd .4
    create-link-from this-fish-body [
      ;; fish-parts will link to the fish body -
      ;; thus following the fish body around as it moves
      set hidden? true
      set tie-mode "fixed"
      tie
    ]
  ]
  hatch 1 [                      ;;;make fins
    set breed fish-parts
    set size 1
    set shape "fish-fins"
    set color dorsal-fin-color-phenotype
    create-link-from this-fish-body  [
      ;; fish-parts will link to the fish body -
      ;; thus following the fish body around as it moves
      set hidden? true
      set tie-mode "fixed"
      tie
    ]
  ]

  hatch 1 [                      ;;;make spots
    set breed fish-parts
    set size 1
    set shape rear-spots-phenotype
    set color [ 0 0 0 255]
    create-link-from this-fish-body [
      ;; fish-parts will link to the fish body -
      ;; thus following the fish body around as it moves
      set hidden? true
      set tie-mode "fixed"
      tie
    ]
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;; phenotype reporters ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to-report has-at-least-one-dominant-set-of-instructions-for [dominant-allele]
  let this-somatic-cell self
  let #-of-dominant-alleles count alleles with [in-link-neighbor? this-somatic-cell  and value = dominant-allele]
  ifelse #-of-dominant-alleles > 0  [report true][report false]   ;; if it has at least one set of instructions (DNA) on how to build the protein reports true
end


to-report tail-shape-phenotype
  let this-shape ""
  let this-fish  myself
  ask myself ;; the somatic-cell
  [
    ifelse  has-at-least-one-dominant-set-of-instructions-for "F"
       [set this-shape forked-tail-shape]      ;; tail fin forking results if protein is produced
       [set this-shape no-forked-tail-shape]   ;; no tail fin forking results if protein is not produced (underlying tissue is continuous triangle shape)
  ]
  report this-shape
end


to-report rear-spots-phenotype
  let this-spots-shape ""
  ask myself
  [
    ifelse has-at-least-one-dominant-set-of-instructions-for "B"
       [set this-spots-shape spots-shape]    ;; spots on the rear of the fish result if protein is produced
       [set this-spots-shape no-spots-shape]     ;; no spots on the rear of the fish result if protein is not produced
  ]
  report this-spots-shape
end


to-report dorsal-fin-color-phenotype
  let this-color []
  ask myself
  [
    ifelse  has-at-least-one-dominant-set-of-instructions-for "G"
      [set this-color green-dorsal-fin-color  ]      ;; green color results in dorsal fins if protein is produced
      [set this-color no-green-dorsal-fin-color ]    ;; no green color results in dorsal fins if protein is not produced (underlying tissue color is grayish)
  ]
  report this-color
end


to-report tail-color-phenotype
  let this-color []
  let this-fish  myself
  ask myself
  [
    ifelse  has-at-least-one-dominant-set-of-instructions-for "T"
       [set this-color yellow-tail-fin-color ]     ;; yellow color results in tail fins results if protein is produced
       [set this-color no-yellow-tail-fin-color ]  ;; yellow color results in tail fins if protein is not produced (underlying tissue is continuous triangle shape)
  ]
  report this-color
end


to-report sex-phenotype
  let this-sex ""
  let this-cell self
  ifelse  has-at-least-one-dominant-set-of-instructions-for "Y"
     [set this-sex "male"]
     [set this-sex "female"]
   report this-sex
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;; other reporters ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to-report alleles-that-belong-to-this-gamete
  report alleles with [in-link-neighbor? myself]
end


to-report left-side-of-water-in-tank
  report (min-pxcor) + 2
end


to-report right-side-of-water-in-tank
  report  (max-pxcor) - 2
end



to-report other-turtles-in-this-turtles-tank-region
  ;; when dividers are up, it reports how many turtles are in this region for this turtle
  let turtles-in-this-region nobody
  let xcor-of-this-turtle xcor
  let this-region-left-side left-side-of-water-in-tank
  let this-region-right-side right-side-of-water-in-tank
  let dividers-to-the-right patches with [divider-here? and pxcor > xcor-of-this-turtle]
  let dividers-to-the-left  patches with [divider-here? and pxcor < xcor-of-this-turtle]

  if any? dividers-to-the-right [set this-region-right-side min [pxcor] of dividers-to-the-right ]
  if any? dividers-to-the-left  [set this-region-left-side max [pxcor] of dividers-to-the-left   ]

  set turtles-in-this-region turtles with [xcor >= this-region-left-side and xcor <= this-region-right-side]
  report turtles-in-this-region
end


to-report both-sexes-in-this-fishs-tank-region?
  let fish-in-this-region other-turtles-in-this-turtles-tank-region with [breed = fish]
  let male-fish-in-this-region fish-in-this-region with [sex = "male"]
  let female-fish-in-this-region fish-in-this-region with [sex = "female"]
  ifelse (any? male-fish-in-this-region and any? female-fish-in-this-region ) [report true] [report false]
end



to-report carrying-capacity-in-this-region [this-xcor]
  let this-region-left-side left-side-of-water-in-tank
  let this-region-right-side right-side-of-water-in-tank
  let dividers-to-the-right patches with [divider-here? and pxcor > this-xcor]
  let dividers-to-the-left  patches with [divider-here? and pxcor < this-xcor]

  if any? dividers-to-the-right [ set this-region-right-side min [pxcor] of dividers-to-the-right ]
  if any? dividers-to-the-left  [ set this-region-left-side max [pxcor] of dividers-to-the-left   ]
  let tank-capacity-of-this-region (this-region-right-side - this-region-left-side) * carrying-capacity / 25
  report tank-capacity-of-this-region
end


; Copyright 2011 Uri Wilensky.
; See Info tab for full copyright and license.